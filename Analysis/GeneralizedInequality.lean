/-
Copyright (c) 2023 Heying Wang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: Heying Wang.
-/

import Mathlib.Analysis.Convex.Cone.Dual
import Mathlib.Analysis.InnerProductSpace.Adjoint
import Mathlib.Analysis.Convex.Cone.Proper

/-
# Proper Cone'

In this file, we defined ProperCone' as nonempty, closed, salient, solid convex cones. Some basic properties are also listed in the first part of this file.

# Partial order

In this part, we define the partial order respected to proper cones we defined above. Moreover, we list some generalized inequalities and give brief proofs.

## References

[Convex Cone](https://en.wikipedia.org/wiki/Convex_cone#:~:text=The%20term%20proper%20(convex)%20cone,salient%2C%20and%20full%2Ddimensional.)

[Convex set](http://faculty.bicmr.pku.edu.cn/~wenzw/optbook/lect/02-convex-set.pdf)
-/

section ProperCone'

open Set

namespace ConvexCone

variable {ùïú : Type _} [OrderedSemiring ùïú]

variable {E : Type _} [AddCommGroup E] [TopologicalSpace E] [SMul ùïú E]

/-
A proper cone here, named as ProperCone'', is a convex cone `K` that is nonempty, closed, salient and solid. Such a cone is obviously not an empty set, the universe, a half-space or a singleton.
-/

/-
A convex cone is said to be solid if its interior is nonempty.
-/
def Solid (S : ConvexCone ùïú E) : Prop :=
  (interior S.carrier).Nonempty

structure ProperCone' (ùïú : Type _) (E : Type _) [OrderedSemiring ùïú] [AddCommGroup E]
    [TopologicalSpace E] [SMul ùïú E]
    extends ConvexCone ùïú E where
  nonempty' : (carrier : Set E).Nonempty
  is_closed' : IsClosed (carrier : Set E)
  salient' : ‚àÄ (x : E), x ‚àà (carrier : Set E) ‚Üí x ‚â† 0 ‚Üí ¬¨ -x ‚àà (carrier : Set E)
  solid' : (interior carrier).Nonempty

namespace ProperCone'

instance : Coe (ProperCone' ùïú E) (ConvexCone ùïú E) := ‚ü®fun K => K.1‚ü©

theorem ext' : Function.Injective ((‚Üë) : ProperCone' ùïú E ‚Üí ConvexCone ùïú E) :=
fun S T h => by
  cases S; cases T; congr

instance : SetLike (ProperCone' ùïú E) E where
  coe K := K.carrier
  coe_injective' _ _ h := ProperCone'.ext' (SetLike.coe_injective h)

protected theorem nonempty (K : ProperCone' ùïú E) : (K : Set E).Nonempty := K.nonempty'

protected theorem isClosed (K : ProperCone' ùïú E) : IsClosed (K : Set E) := K.is_closed'

protected theorem salient (K : ProperCone' ùïú E) : (K : ConvexCone ùïú E).Salient := K.salient'

protected theorem solid (K : ProperCone' ùïú E) : (K : ConvexCone ùïú E).Solid := K.solid'

/-
For every real proper cone in an Hilbert space, it is pointed.
-/
variable {H : Type _} [NormedAddCommGroup H] [InnerProductSpace ‚Ñù H] (s t : Set H)

protected theorem pointed (K : ProperCone' ‚Ñù H) : (K : ConvexCone ‚Ñù H).Pointed :=
  (K : ConvexCone ‚Ñù H).pointed_of_nonempty_of_isClosed K.nonempty' K.isClosed


section GeneralizedInequalities

variable {E : Type _} [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E]

instance toPreorder.ProperCone' (S : ProperCone' ‚Ñù E) : Preorder E where
  le x y := y - x ‚àà S
  le_refl x := by
    change x - x ‚àà S
    rw [sub_self x]
    exact ProperCone'.pointed S
  le_trans x y z xy zy := by
    dsimp; dsimp at xy; dsimp at zy
    have h : z - x = z - y + (y - x) := by
      rw [sub_add_sub_cancel]
    rw [h]
    exact S.add_mem zy xy
/-
For the lt-part of Preorder, we usually define a < b as b - a ‚àà S.interior for cones. So we will temporarily ignore this in defining preorder of proper cones.
-/

instance toPartialOrder.ProperCone' (S : ProperCone' ‚Ñù E) : PartialOrder E :=
  { toPreorder.ProperCone' S with
    le_antisymm := by
      intro a b ab ba
      by_contra h‚ÇÅ
      have h‚ÇÇ : b - a ‚â† 0 := fun h‚ÇÉ => h‚ÇÅ (eq_of_sub_eq_zero h‚ÇÉ).symm
      have h := ProperCone'.salient S
      have H := h (b - a) ab h‚ÇÇ
      rw [neg_sub b a] at H
      exact H ba
  }

/-
The followings are two basic properties for preorders.
-/
theorem add_le_add.ProperCone' (S : ProperCone' ‚Ñù E) (a b c d : E) (h‚ÇÅ : (toPartialOrder.ProperCone' S).le a b) (h‚ÇÇ : (toPartialOrder.ProperCone' S).le c d): (toPartialOrder.ProperCone' S).le (a + c) (b + d) := by
  have h‚ÇÅ' : b - a ‚àà S := h‚ÇÅ
  have h‚ÇÇ' : d - c ‚àà S := h‚ÇÇ
  have h‚ÇÉ' : b - a + (d - c) ‚àà S := S.add_mem h‚ÇÅ' h‚ÇÇ'
  have h‚ÇÉ : b - a + (d - c) = b + d - (a + c) := sub_add_sub_comm b a d c
  rw [h‚ÇÉ] at h‚ÇÉ'
  exact h‚ÇÉ'

theorem add_le_mul_of_nonneg_const.ProperCone' (S : ProperCone' ‚Ñù E) (a b : E) (c : ‚Ñù) (h‚ÇÄ : 0 ‚â§ c) (h‚ÇÅ : (toPartialOrder.ProperCone' S).le a b) : (toPartialOrder.ProperCone' S).le (c ‚Ä¢ a) (c ‚Ä¢ b) := by
  by_cases h‚ÇÄ' : c = 0
  ¬∑ have hl : c ‚Ä¢ a = 0 := smul_eq_zero_of_left h‚ÇÄ' a
    have hr : c ‚Ä¢ b = 0 := smul_eq_zero_of_left h‚ÇÄ' b
    rw [hl, hr]
    have h0 : 0 - 0 ‚àà S := by
      simp only [sub_self]
      exact ProperCone'.pointed S
    exact h0
  have h‚ÇÄ'' : 0 < c := Ne.lt_of_le' h‚ÇÄ' h‚ÇÄ
  have h‚ÇÅ' : b - a ‚àà S := h‚ÇÅ
  have h‚ÇÇ : c ‚Ä¢ (b - a) ‚àà S := by
    apply S.smul_mem
    ¬∑ exact h‚ÇÄ''
    ¬∑ exact h‚ÇÅ'
  have h‚ÇÇ' : c ‚Ä¢ (b - a) = c ‚Ä¢ b - c ‚Ä¢ a := smul_sub c b a
  rw [h‚ÇÇ'] at h‚ÇÇ
  exact h‚ÇÇ
